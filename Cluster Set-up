Agenda: Kubernetes Setup Using Kubeadm In AWS EC2 Ubuntu Servers
=======================================================

Prerequisite:
==========
3 - Ubuntu Serves
1 - Manager  (4GB RAM , 2 Core) t2.medium
2 - Workers  (1 GB, 1 Core)     t2.micro
Note: Open Required Ports In AWS Security Groups. For now we will open All trafic.(for practice purpose only)

Ports:
======

Control Plane Node :-
==================
Protocol | Direction |	Port Range |	Purpose	              | Used By
   TCP	| Inbound   |	6443	     | Kubernetes API server	  | All
   TCP	| Inbound	| 2379-2380	  | etcd server client API	  | kube-apiserver, etcd
   TCP	| Inbound	| 10250	     | Kubelet API	           | Self, Control plane
   TCP	| Inbound	| 10259	     | kube-scheduler	        | Self
   TCP	| Inbound	| 10257	     | kube-controller-manager  | Self

Worker Nodes:-
============
Protocol | Direction |	Port Range  |	Purpose	              | Used By
   TCP	| Inbound   |	10250       | Kubelet API        	  | Self, Control plane
   TCP	| Inbound	| 30000-32767  | NodePort Servicest  	  | All


========== COMMON FOR MASTER & SLAVES START ====

# First, login as ‘root’ user because the following set of commands need to be executed with ‘sudo’ permissions.

sudo su -

# Turn Off Swap Space

swapoff -a
sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

# Install Required packages and apt keys.

apt-get update -y
apt-get install -y apt-transport-https
sudo apt-get install -y apt-transport-https ca-certificates curl gpg
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
apt-get update -y
cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
> overlay
> br_netfilter
EOF
modprobe overlay
modprobe br_netfilter
cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptablesysctl --systems = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward = 1
EOF
sysctl --system

#Install kubeadm, Kubelet Containerd And Kubectl 

apt-get install -y kubelet kubeadm kubectl kubernetes-cni containerd

# Enable and start kubelet service

systemctl daemon-reload
systemctl start kubelet
systemctl enable kubelet.service
systemctl start containerd
systemctl enable containerd


==========COMMON FOR MASTER & SLAVES END=====

